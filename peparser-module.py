import argparse
import pefile # py -3.7 -m pip install pefile
import hashlib

def print_valid_header(pe):
    if pe.is_exe():
        print("\nValid PE Header - detected\n--")
    else:
        print("\nNOT a valid PE Header - detected\n--")

def explain_functions_from_dlls(dictentry):

    executable_capabilities = [] 
    
    function_dict = {
    "RtlCaptureContext": "Captures the context of the current thread",
    "RtlLookupFunctionEntry": "Finds information about a function in exception handling data",
    "RtlVirtualUnwind": "Unwinds the stack frame for a specified function call",
    "RtlUnwindEx": "Unwinds the stack frame for a specified function call with extended options",
    "RtlPcToFileHeader": "Finds the file header of a module from a given program counter",
    "RtlGetVersion": "Retrieves version information about the operating system",
    "NtMapViewOfSection": "Maps a view of a section object into the address space of a process",
    "NtWaitForSingleObject": "Waits until a single object is in the signaled state",
    "NtCreateFile": "Creates or opens a file or directory object",
    "NtQueryObject": "Retrieves information about an object such as a file, event, or semaphore",
    "NtUnmapViewOfSection": "Unmaps a previously mapped view of a section from the address space of a process",
    "NtCreateDebugObject": "Creates a debug object for debugging purposes",
    "RtlFreeHeap": "Frees a block of memory allocated on the heap",
    "NtSetEvent": "Sets the state of an event object to signaled",
    "NtCreateEvent": "Creates or opens an event object",
    "NtClose": "Closes a handle to an object such as a file, event, or semaphore",
    "NtQueryInformationProcess": "Retrieves information about a specified process",
    "NtQuerySystemInformation": "Retrieves information about system-wide parameters and performance statistics",
    "NtCreateSection": "Creates or opens a section object for memory mapping",
    "RtlAllocateHeap": "Allocates a block of memory on the heap",
    "SetEndOfFile": "Sets the end-of-file position for a file",
    "HeapSize": "Retrieves the size of a memory block in the heap",
    "SetFilePointerEx": "Moves the file pointer for a file",
    "GetFileSizeEx": "Retrieves the size of a file",
    "GetConsoleMode": "Retrieves the input mode of a console's input buffer",
    "GetConsoleOutputCP": "Retrieves the output code page for the console",
    "FlushFileBuffers": "Flushes the buffers of a specified file",
    "CreateFileW": "Creates or opens a file or device",
    "CloseHandle": "Closes an open object handle",
    "GetProcessHeap": "Retrieves a handle to the default process heap",
    "SetStdHandle": "Sets the standard handle for a specified device",
    "FreeEnvironmentStringsW": "Frees the environment strings for a process",
    "WriteConsoleW": "Writes characters to a console screen buffer",
    "SetConsoleCtrlHandler": "Sets a control handler function for a console process",
    "GetConsoleScreenBufferInfo": "Retrieves information about the console screen buffer",
    "SetLastError": "Sets the last-error code for the calling thread",
    "SetConsoleTextAttribute": "Sets the text and background color attributes for the console",
    "GetCurrentProcess": "Retrieves a pseudo-handle to the current process",
    "OutputDebugStringA": "Writes a string to the debugger's output",
    "DuplicateHandle": "Creates a new handle to an existing object",
    "GetLastError": "Retrieves the last-error code for the calling thread",
    "RaiseException": "Raises an exception in the current thread",
    "FreeConsole": "Detaches the calling process from its console",
    "ReadFile": "Reads data from a file or input/output device",
    "AllocConsole": "Creates a new console for the calling process",
    "SetConsoleTitleW": "Sets the title of the console window",
    "IsDebuggerPresent": "Determines whether the calling process is being debugged",
    "CheckRemoteDebuggerPresent": "Determines whether a remote process is being debugged",
    "IsWow64Process": "Determines whether the process is running on a 64-bit operating system",
    "GetModuleFileNameW": "Retrieves the full path of the executable file of a module",
    "FormatMessageW": "Formats a message string using a message definition",
    "GetProcAddress": "Retrieves the address of an exported function or variable",
    "LocalFree": "Frees the memory allocated by the LocalAlloc function",
    "GetModuleHandleW": "Retrieves a handle to a module from its file name",
    "GetEnvironmentStringsW": "Retrieves the environment variable strings for a process",
    "GetCommandLineW": "Retrieves the command line for the current process as a Unicode string",
    "GetCommandLineA": "Retrieves the command line for the current process as an ANSI string",
    "GetOEMCP": "Retrieves the current OEM code page",
    "GetACP": "Retrieves the current ANSI code page",
    "IsValidCodePage": "Determines whether a code page is valid or not",
    "WideCharToMultiByte": "Converts wide character (Unicode) strings to multibyte strings",
    "TlsSetValue": "Sets the value in the calling thread's thread-local storage (TLS) array",
    "FindNextFileW": "Searches for the next file or directory in a file search",
    "FindFirstFileExW": "Searches for the first file or directory in a file search",
    "FindClose": "Closes a file search handle",
    "MultiByteToWideChar": "Converts multibyte character strings to wide character (Unicode) strings",
    "EnterCriticalSection": "Enters a critical section object",
    "LeaveCriticalSection": "Leaves a critical section object",
    "DeleteCriticalSection": "Deletes a critical section object",
    "EncodePointer": "Encodes a pointer for obfuscation purposes",
    "DecodePointer": "Decodes a previously encoded pointer",
    "InitializeCriticalSectionAndSpinCount": "Initializes a critical section object with a spin count",
    "TlsAlloc": "Allocates a thread-local storage (TLS) index",
    "TlsGetValue": "Retrieves the value in the calling thread's thread-local storage (TLS) array",
    "HeapReAlloc": "Reallocates a block of memory in the heap",
    "TlsFree": "Frees a thread-local storage (TLS) index",
    "GetSystemTimeAsFileTime": "Retrieves the current system date and time in file time format",
    "GetStringTypeW": "Retrieves character type information for a set of characters",
    "LCMapStringW": "Maps one set of characters to another set based on locale-specific rules",
    "GetCPInfo": "Retrieves information about a code page, including lead bytes and conversion flags",
    "QueryPerformanceCounter": "Retrieves the current value of the high-resolution performance counter",
    "GetCurrentProcessId": "Retrieves the process identifier of the current process",
    "GetCurrentThreadId": "Retrieves the thread identifier of the calling thread",
    "InitializeSListHead": "Initializes a singly linked list header",
    "UnhandledExceptionFilter": "Sets or retrieves the unhandled exception filter function",
    "SetUnhandledExceptionFilter": "Sets an unhandled exception filter function for the calling process",
    "GetStartupInfoW": "Retrieves the contents of the STARTUPINFO structure",
    "IsProcessorFeaturePresent": "Determines whether a specific processor feature is present",
    "TerminateProcess": "Terminates a process and all of its threads",
    "FreeLibrary": "Frees the loaded dynamic-link library (DLL) module",
    "LoadLibraryExW": "Loads a dynamic-link library (DLL) module and returns a handle to it",
    "GetStdHandle": "Retrieves a handle to a standard device (eg, input, output, error)",
    "WriteFile": "Writes data to a file or output/input device",
    "ExitProcess": "Terminates the current process and all of its threads",
    "HeapAlloc": "Allocates a block of memory from a heap",
    "HeapFree": "Frees a memory block allocated from a heap",
    "FlsAlloc": "Allocates a fiber local storage (FLS) index",
    "FlsGetValue": "Retrieves the value associated with a fiber local storage (FLS) index",
    "FlsSetValue": "Sets the value associated with a fiber local storage (FLS) index",
    "FlsFree": "Frees a fiber local storage (FLS) index",
    "GetFileType": "Retrieves the file type of a specified file handle",
    "ReadConsoleW": "Reads character input from the console's input buffer",
    "MessageBoxW" : "Displays a dialogue box",
    "OpenProcess": "Opens an existing process object with various access rights",
    "CreateRemoteThread": "Creates a thread that runs in the address space of another process",
    "LoadLibraryA": "Loads a dynamic-link library (DLL) module using an ANSI string",
    "LoadLibraryW": "Loads a dynamic-link library (DLL) module using a Unicode string",
    "GetProcAddress": "Retrieves the address of an exported function or variable from a module",
    "VirtualAllocEx": "Reserves or commits a region of pages in the address space of a specified process",
    "WriteProcessMemory": "Writes data to an area of memory in a specified process",
    "CreateFileMappingA": "Creates or opens a named or unnamed file-mapping object",
    "CreateFileMappingW": "Creates or opens a named or unnamed file-mapping object (Unicode version)",
    "MapViewOfFile": "Maps a view of a file-mapping object into the address space",
    "CreateToolhelp32Snapshot": "Creates a snapshot of the specified process and thread data",
    "NtCreateThreadEx": "Creates a thread in the address space of another process",
    "SetWindowsHookEx": "Installs an application-defined hook procedure (potentially for keylogging)",
    "ShellExecuteA": "Launches an application or opens a document using the Windows shell (ANSI version)",
    "ShellExecuteW": "Launches an application or opens a document using the Windows shell (Unicode version)",
    "RegOpenKeyExA": "Opens the specified registry key (ANSI version)",
    "RegOpenKeyExW": "Opens the specified registry key (Unicode version)",
    "RegSetValueExA": "Sets the data for a specified value of an open registry key (ANSI version)",
    "RegSetValueExW": "Sets the data for a specified value of an open registry key (Unicode version)",
    "InternetOpenA": "Initializes an application's use of the WinINet functions (ANSI version)",
    "InternetOpenW": "Initializes an application's use of the WinINet functions (Unicode version)",
    "HttpSendRequestA": "Sends an HTTP request to the HTTP server (ANSI version)",
    "HttpSendRequestW": "Sends an HTTP request to the HTTP server (Unicode version)",
    "WSAStartup": "Initializes the Winsock DLL",
    "WSASend": "Sends data on a connected socket",
    "VirtualProtectEx": "Changes the protection on a region of committed pages in the virtual address space of a process",
    "NetUserGetLocalGroups": "Retrieves information about the local groups to which a user account belongs",
    "WinExec": "Runs the specified application",
    "WinHttpSendRequest": "Sends an HTTP request to a specified server",
    "CryptEncrypt": "Encrypts data using a cryptographic key",
    "CryptDecrypt": "Decrypts data using a cryptographic key",
    "ObtainUserAgentString": "Retrieves the user agent string for the current web browser",
    "RegisterHotKey": "Registers a hotkey combination that can be used to trigger an action",
    "FindWindowA": "Finds a window by its class name (ANSI version)",
    "FindWindowW": "Finds a window by its class name (Unicode version)",
    "CreateRemoteThreadEx": "Creates a remote thread in the address space of another process (Windows 8 and later)",
    "OpenThread": "Opens an existing thread object with various access rights",
    "ShellExecuteExA": "Launches an application using the Windows shell (ANSI version)",
    "ShellExecuteExW": "Launches an application using the Windows shell (Unicode version)",
    "CreateProcessA": "Creates a new process and its primary thread (ANSI version)",
    "CreateProcessW": "Creates a new process and its primary thread (Unicode version)",
    "CreateThread": "Creates a new thread to execute within the address space of the calling process",
    "VirtualAlloc": "Reserves or commits a region of pages in the virtual address space",
    "VirtualProtect": "Changes the protection on a region of committed pages in the virtual address space",
    "MapViewOfFileEx": "Maps a view of a file-mapping object into the address space",
    "EnumProcesses": "Enumerates the currently running processes on the system",
    "NtCreateThread": "Creates a thread in the address space of another process",
    "NtCreateProcessEx": "Creates a new process object and its primary thread",
    "NtTerminateProcess": "Terminates a specified process",
    'HookDllData': "Manipulating DLL data",
    'HookedGetLocalTime': "Manipulating system time (GetLocalTime)",
    'HookedGetSystemTime': "Manipulating system time (GetSystemTime)",
    'HookedGetTickCount': "Suspicious use of GetTickCount",
    'HookedGetTickCount64': "Suspicious use of GetTickCount64",
    'HookedKiUserExceptionDispatcher': "Manipulating exception handling (KiUserExceptionDispatcher)",
    'HookedNativeCallInternal': "Potentially malicious use of NativeCallInternal",
    'HookedNtClose': "Closing handles to objects (NtClose)",
    'HookedNtContinue': "Manipulating thread execution (NtContinue)",
    'HookedNtCreateSection': "Creating or opening section objects (NtCreateSection)",
    'HookedNtCreateThread': "Creating threads in other processes (NtCreateThread)",
    'HookedNtCreateThreadEx': "Creating threads in other processes (NtCreateThreadEx)",
    'HookedNtDuplicateObject': "Duplicating object handles (NtDuplicateObject)",
    'HookedNtGetContextThread': "Retrieving thread context (NtGetContextThread)",
    'HookedNtMapViewOfSection': "Mapping sections into address space (NtMapViewOfSection)",
    'HookedNtOpenFile': "Opening files or devices (NtOpenFile)",
    'HookedNtQueryInformationProcess': "Retrieving process information (NtQueryInformationProcess)",
    'HookedNtQueryObject': "Retrieving object information (NtQueryObject)",
    'HookedNtQueryPerformanceCounter': "High-resolution timer access (NtQueryPerformanceCounter)",
    'HookedNtQuerySystemInformation': "Retrieving system parameters (NtQuerySystemInformation)",
    'HookedNtQuerySystemTime': "Retrieving system time (NtQuerySystemTime)",
    'HookedNtResumeThread': "Resuming thread execution (NtResumeThread)",
    'HookedNtSetContextThread': "Manipulating thread context (NtSetContextThread)",
    'HookedNtSetDebugFilterState': "Manipulating debugger filter (NtSetDebugFilterState)",
    'HookedNtSetInformationProcess': "Manipulating process information (NtSetInformationProcess)",
    'HookedNtSetInformationThread': "Manipulating thread information (NtSetInformationThread)",
    'HookedNtUserBlockInput': "Blocking user input (NtUserBlockInput)",
    'HookedNtUserBuildHwndList': "Building window lists (NtUserBuildHwndList)",
    'HookedNtUserBuildHwndList_Eight': "Building window lists (NtUserBuildHwndList_Eight)",
    'HookedNtUserFindWindowEx': "Finding windows (NtUserFindWindowEx)",
    'HookedNtUserGetForegroundWindow': "Getting the foreground window (NtUserGetForegroundWindow)",
    'HookedNtUserQueryWindow': "Querying window properties (NtUserQueryWindow)",
    'HookedNtYieldExecution': "Yielding thread execution (NtYieldExecution)",
    'HookedOutputDebugStringA': "Manipulating debug output (OutputDebugStringA)"
    }

    try:
        for key in dictentry:
            operationval = dictentry[key]
            if isinstance(operationval, list):
                for every in operationval:
                    try:
                        executable_capabilities.append(function_dict[every])
                    except:
                        pass # no key found , pass 
            else:
                if ", " in operationval:
                    operationval = operationval.split(", ")
                    for every in operationval:
                        try:
                            executable_capabilities.append(function_dict[every])
                        except:
                            pass
                else:
                    try:
                        executable_capabilities.append(function_dict[operationval])
                    except:
                        pass

                
        return executable_capabilities

    except Exception as peerr:
        print("Failed to get additional data on functions:", peerr)

# Function to print imported functions
def print_imported_functions(pe):
    if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
        print("---")
        maindict = {}
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for func in entry.imports:
                try:
                    maindict[entry.dll.decode('utf-8')] = maindict[entry.dll.decode('utf-8')] + ", " + func.name.decode('utf-8')
                except KeyError:
                    maindict[entry.dll.decode('utf-8')] = func.name.decode('utf-8')
        
        print("\n")
        for dll in maindict:
            print("Import > ",dll, ":" ,maindict[dll], "\n")
        
        
        print("\n---")
        
        return maindict


# Function to print relocations
#  specify locations within the binary code where absolute addresses need to be adjusted during the loading process.
def print_relocations(pe):
    if hasattr(pe, 'DIRECTORY_ENTRY_BASERELOC'):
        print("Relocations:")
        RVAS = []
        for reloc in pe.DIRECTORY_ENTRY_BASERELOC:
            for entry in reloc.entries:
                rva_hex = "0x{:08X}".format(entry.rva)
                RVAS.append(rva_hex)
                #0x{section.VirtualAddress:08X}
        
        print(RVAS,"\n---")


# Function to print exported functions
def print_exported_functions(pe):
    funz = []
    if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
        for entry in pe.DIRECTORY_ENTRY_EXPORT.symbols:
            funz.append(entry.name.decode('utf-8'))
    print("--\nExported Functions:", funz,"\n--")
    return funz

# Function to print sections
def print_sections(pe):
    if hasattr(pe, 'sections'):
        print("Sections:")
        for section in pe.sections:
            print(f"> {section.Name.decode('utf-8')}")
            print(f"  Virtual Address: 0x{section.VirtualAddress:08X}")
            print(f"  Size of Raw Data: {section.SizeOfRawData} bytes")

# Function to print the number of resources
def print_number_of_resources(pe):
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        print(f"Number of Resources: {len(pe.DIRECTORY_ENTRY_RESOURCE.entries)}")

# Function to print the program's entry point
def print_entry_point(pe):
    entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    if entry_point:
        print(f"\nEntry Point: 0x{entry_point:08X}")
        print("\n---")
    image_base = pe.OPTIONAL_HEADER.ImageBase
    if image_base:
        print(f"\nImage base point: 0x{image_base:08x}")

def hashes(pe):

    imphash = pe.get_imphash()
    if imphash:
        print("\nImphash:",imphash,"\n")

    md5 = hashlib.md5(pe.__data__).hexdigest()
    if md5:
        print("\nMD5:",md5,"\n")
        




def main():
    parser = argparse.ArgumentParser(description="PE Parse Script")
    parser.add_argument("file", type=str, help="Path to the PE file")

    args = parser.parse_args()

    pe = pefile.PE(args.file)

    # Print different PE attributes
    pe_activities = print_imported_functions(pe) # also returns  maindict - > dict of:   KERNEL32: SetFilePointerEx, OutputDebugStringA, WriteFile
    if len(pe_activities) > 1:
        executable_capabilities_returned = explain_functions_from_dlls(pe_activities)
        if len(executable_capabilities_returned) > 0 and isinstance(executable_capabilities_returned, list): 
            print("\nFunctionalities of imported functions:\n", ', '.join(executable_capabilities_returned),"\n--")
        
    print_relocations(pe)
    exportz = print_exported_functions(pe)
    if len(exportz) > 0:
        exportz = {"exports":exportz}
        ex_caps_returned_for_exportz = explain_functions_from_dlls(exportz)
        if len(ex_caps_returned_for_exportz) > 0:
            print("\nFunctionalities of exported functions:",ex_caps_returned_for_exportz)
    print_sections(pe)
    print_entry_point(pe)
    print_valid_header(pe)
    hashes(pe)

if __name__ == "__main__":
    main()
